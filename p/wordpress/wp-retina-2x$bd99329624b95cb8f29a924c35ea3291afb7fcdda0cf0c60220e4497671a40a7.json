{
    "packages": {
        "wordpress\/wp-retina-2x": {
            "0.1": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.1",
                "version_normalized": "0.1.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.1.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22881"
            },
            "0.1.2": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.1.2",
                "version_normalized": "0.1.2.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.1.2.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22880"
            },
            "0.1.4": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.1.4",
                "version_normalized": "0.1.4.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.1.4.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22879"
            },
            "0.1.6": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.1.6",
                "version_normalized": "0.1.6.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.1.6.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22878"
            },
            "0.1.8": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.1.8",
                "version_normalized": "0.1.8.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.1.8.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22877"
            },
            "0.2": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.2",
                "version_normalized": "0.2.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.2.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22876"
            },
            "0.2.1": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.2.1",
                "version_normalized": "0.2.1.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.2.1.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22875"
            },
            "0.2.2": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.2.2",
                "version_normalized": "0.2.2.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.2.2.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22874"
            },
            "0.2.4": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.2.4",
                "version_normalized": "0.2.4.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.2.4.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22873"
            },
            "0.2.6": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.2.6",
                "version_normalized": "0.2.6.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.2.6.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22871"
            },
            "0.2.8": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.2.8",
                "version_normalized": "0.2.8.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.2.8.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22870"
            },
            "0.2.9": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.2.9",
                "version_normalized": "0.2.9.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.2.9.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22869"
            },
            "0.3": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.3",
                "version_normalized": "0.3.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.3.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22868"
            },
            "0.3.1": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.3.1",
                "version_normalized": "0.3.1.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.3.1.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22867"
            },
            "0.3.2": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.3.2",
                "version_normalized": "0.3.2.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.3.2.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22866"
            },
            "0.3.4": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.3.4",
                "version_normalized": "0.3.4.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.3.4.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22865"
            },
            "0.4": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.4",
                "version_normalized": "0.4.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.4.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22864"
            },
            "0.4.2": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.4.2",
                "version_normalized": "0.4.2.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.4.2.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22863"
            },
            "0.8": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.8",
                "version_normalized": "0.8.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.8.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22862"
            },
            "0.9": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.9",
                "version_normalized": "0.9.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.9.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22861"
            },
            "0.9.4": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.9.4",
                "version_normalized": "0.9.4.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.9.4.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22859"
            },
            "0.9.6": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.9.6",
                "version_normalized": "0.9.6.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.9.6.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22858"
            },
            "0.9.8": {
                "name": "wordpress\/wp-retina-2x",
                "version": "0.9.8",
                "version_normalized": "0.9.8.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.0.9.8.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22857"
            },
            "1.0.0": {
                "name": "wordpress\/wp-retina-2x",
                "version": "1.0.0",
                "version_normalized": "1.0.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.1.0.0.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22856"
            },
            "1.2.0": {
                "name": "wordpress\/wp-retina-2x",
                "version": "1.2.0",
                "version_normalized": "1.2.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.1.2.0.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "22855"
            },
            "1.4.0": {
                "name": "wordpress\/wp-retina-2x",
                "version": "1.4.0",
                "version_normalized": "1.4.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.1.4.0.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "124649"
            },
            "1.4.2": {
                "name": "wordpress\/wp-retina-2x",
                "version": "1.4.2",
                "version_normalized": "1.4.2.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.1.4.2.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "124648"
            },
            "1.6.0": {
                "name": "wordpress\/wp-retina-2x",
                "version": "1.6.0",
                "version_normalized": "1.6.0.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.1.6.0.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "127967"
            },
            "1.6.2": {
                "name": "wordpress\/wp-retina-2x",
                "version": "1.6.2",
                "version_normalized": "1.6.2.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/wp-retina-2x.1.6.2.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin creates the image files required by the Retina (high-DPI) displays and it displays them to your visitors accordingly. Your website will look beautiful and sharp on every device. The retina images will be generated for you automatically, served, and you will be able to control everything from the Retina Dashboard.<\/p>\n\n<p>It supports 4 different methods to serve the images to your visitors:<\/p>\n\n<ul>\n<li>HTML srcset: The HTML will be rewritten with the srcset attribute added to the img tags.<\/li>\n<li>HTML Rewrite: The HTML is rewritten with the images replaced by their retina equivalent.<\/li>\n<li>Retina.js: This method should work in every case. Normal images are loaded first, then the client-side checks for retina images and download them if available. Works with caching but loads 2 images instead of 1.<\/li>\n<li>Retina-Images: Uses a server-handler that decides whether to send the normal image or the retina image.<\/li>\n<li>Do you have any other idea? Let me know! :)<\/li>",
                "uid": "127966"
            }
        }
    }
}