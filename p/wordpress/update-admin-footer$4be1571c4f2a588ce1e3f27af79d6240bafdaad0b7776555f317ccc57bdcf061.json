{
    "packages": {
        "wordpress\/update-admin-footer": {
            "1.0.1": {
                "name": "wordpress\/update-admin-footer",
                "version": "1.0.1",
                "version_normalized": "1.0.1.0",
                "dist": {
                    "type": "zip",
                    "url": "http:\/\/downloads.wordpress.org\/plugin\/update-admin-footer.1.0.1.zip",
                    "reference": null,
                    "shasum": null
                },
                "require": {
                    "wordpress\/installer": "0.1.*"
                },
                "type": "wordpress-plugin",
                "description": "<p>This plugin update your admin footer text without opening the code files.<\/p>\n\n<p>A few notes about the sections above:<\/p>\n\n<ul>\n<li>kamibutt<\/li>\n<li>admin footer, update admin footer, admin footer update<\/li>\n<li>2.8.6<\/li>\n<li>3.1.2<\/li>\n<li>4.3<\/li>\n<\/ul>\n\n<p>Note that the <code>readme.txt<\/code> of the stable tag is the one that is considered the defining one for the plugin, so\nif the <code>\/trunk\/readme.txt<\/code> file says that the stable tag is <code>4.3<\/code>, then it is <code>\/tags\/4.3\/readme.txt<\/code> that'll be used\nfor displaying information about the plugin.  In this situation, the only thing considered from the trunk <code>readme.txt<\/code>\nis the stable tag pointer.  Thus, if you develop in trunk, you can update the trunk <code>readme.txt<\/code> to reflect changes in\nyour in-development version, without having that information incorrectly disclosed about the current stable version\nthat lacks those changes -- as long as the trunk's <code>readme.txt<\/code> points to",
                "uid": "47713"
            }
        }
    }
}